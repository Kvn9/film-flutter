{
    "sourceFile": "src/Controller/CategoryController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1721225667358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1721225667358,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Controller;\n\nuse App\\Entity\\Category;\nuse App\\Form\\CategoryType;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\n\nclass CategoryController extends AbstractController\n{\n    private EntityManagerInterface $entityManager;\n\n    public function __construct(EntityManagerInterface $entityManager)\n    {\n        $this->entityManager = $entityManager;\n    }\n\n    #[Route('/categories', name: 'app_category_list', methods: ['GET'])]\n    public function list(): JsonResponse\n    {\n        $categories = $this->entityManager->getRepository(Category::class)->findAll();\n\n        $data = [];\n        foreach ($categories as $category) {\n            $data[] = [\n                'id' => $category->getId(),\n                'nom' => $category->getNom(),\n                'description' => $category->getDescription(),\n            ];\n        }\n\n        return new JsonResponse($data, Response::HTTP_OK);\n    }\n\n    #[Route('/category/{id}', name: 'app_category_get', methods: ['GET'])]\n    public function get(int $id): JsonResponse\n    {\n        $category = $this->entityManager->getRepository(Category::class)->find($id);\n\n        if (!$category) {\n            return new JsonResponse(['message' => 'Category not found'], Response::HTTP_NOT_FOUND);\n        }\n\n        $data = [\n            'id' => $category->getId(),\n            'nom' => $category->getNom(),\n            'description' => $category->getDescription(),\n        ];\n\n        return new JsonResponse($data, Response::HTTP_OK);\n    }\n\n    #[Route('/category', name: 'app_category_create', methods: ['POST'])]\n    public function create(Request $request): JsonResponse\n    {\n        $data = json_decode($request->getContent(), true);\n\n        $category = new Category();\n        $category->setNom($data['nom']);\n        $category->setDescription($data['description']);\n\n        $this->entityManager->persist($category);\n        $this->entityManager->flush();\n\n        return new JsonResponse([\n            'message' => 'Category created successfully',\n            'id' => $category->getId(),\n        ], Response::HTTP_CREATED);\n    }\n\n    #[Route('/category/{id}', name: 'app_category_edit', methods: ['PUT'])]\n    public function edit(int $id, Request $request): JsonResponse\n    {\n        $category = $this->entityManager->getRepository(Category::class)->find($id);\n\n        if (!$category) {\n            return new JsonResponse(['message' => 'Category not found'], Response::HTTP_NOT_FOUND);\n        }\n\n        $data = json_decode($request->getContent(), true);\n\n        if (isset($data['nom'])) {\n            $category->setNom($data['nom']);\n        }\n        if (isset($data['description'])) {\n            $category->setDescription($data['description']);\n        }\n\n        $this->entityManager->flush();\n\n        return new JsonResponse([\n            'message' => 'Category updated successfully',\n            'id' => $category->getId(),\n        ], Response::HTTP_OK);\n    }\n\n    #[Route('/category/{id}', name: 'app_category_delete', methods: ['DELETE'])]\n    public function delete(int $id): JsonResponse\n    {\n        $category = $this->entityManager->getRepository(Category::class)->find($id);\n\n        if (!$category) {\n            return new JsonResponse(['message' => 'Category not found'], Response::HTTP_NOT_FOUND);\n        }\n\n        $this->entityManager->remove($category);\n        $this->entityManager->flush();\n\n        return new JsonResponse(['message' => 'Category deleted successfully'], Response::HTTP_NO_CONTENT);\n    }\n}\n"
        }
    ]
}