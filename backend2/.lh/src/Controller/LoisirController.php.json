{
    "sourceFile": "src/Controller/LoisirController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1721226365583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721226550927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,15 +2,16 @@\n \n namespace App\\Controller;\n \n use App\\Entity\\Loisir;\n+use App\\Entity\\Category;\n use App\\Repository\\LoisirRepository;\n use Doctrine\\ORM\\EntityManagerInterface;\n use Symfony\\Component\\HttpFoundation\\Request;\n use Symfony\\Component\\HttpFoundation\\Response;\n use Symfony\\Component\\Routing\\Annotation\\Route;\n+use Symfony\\Component\\HttpFoundation\\JsonResponse;\n use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n-use Symfony\\Component\\HttpFoundation\\JsonResponse;\n \n class LoisirController extends AbstractController\n {\n     private EntityManagerInterface $entityManager;\n"
                },
                {
                    "date": 1721227478090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n <?php\n \n namespace App\\Controller;\n \n+use App\\Entity\\User;\n use App\\Entity\\Loisir;\n use App\\Entity\\Category;\n use App\\Repository\\LoisirRepository;\n use Doctrine\\ORM\\EntityManagerInterface;\n@@ -93,9 +94,8 @@\n     #[Route('/loisir/{id}', name: 'app_loisir_update', methods: ['PUT'])]\n     public function update(Request $request, int $id): JsonResponse\n     {\n         $data = json_decode($request->getContent(), true);\n-\n         $loisir = $this->loisirRepository->find($id);\n \n         if (!$loisir) {\n             return new JsonResponse(['message' => 'Loisir not found'], Response::HTTP_NOT_FOUND);\n"
                },
                {
                    "date": 1721227483569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,18 +95,15 @@\n     public function update(Request $request, int $id): JsonResponse\n     {\n         $data = json_decode($request->getContent(), true);\n         $loisir = $this->loisirRepository->find($id);\n-\n         if (!$loisir) {\n             return new JsonResponse(['message' => 'Loisir not found'], Response::HTTP_NOT_FOUND);\n         }\n-\n         $loisir->setTitre($data['titre']);\n         $loisir->setDescription($data['description']);\n         $loisir->setNotation($data['notation']);\n         $loisir->setCreatedAt(new \\DateTime($data['createdAt']));\n-\n         // Handle category and user associations\n         $category = $this->entityManager->getRepository(Category::class)->find($data['category']);\n         $user = $this->entityManager->getRepository(User::class)->find($data['user']);\n         $loisir->setCategory($category);\n"
                },
                {
                    "date": 1721227489962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,11 +107,9 @@\n         $category = $this->entityManager->getRepository(Category::class)->find($data['category']);\n         $user = $this->entityManager->getRepository(User::class)->find($data['user']);\n         $loisir->setCategory($category);\n         $loisir->setUser($user);\n-\n         $this->entityManager->flush();\n-\n         return new JsonResponse([\n             'message' => 'Loisir updated successfully',\n         ]);\n     }\n"
                },
                {
                    "date": 1721227495160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,18 +112,16 @@\n         return new JsonResponse([\n             'message' => 'Loisir updated successfully',\n         ]);\n     }\n-\n     #[Route('/loisir/{id}', name: 'app_loisir_delete', methods: ['DELETE'])]\n     public function delete(int $id): JsonResponse\n     {\n         $loisir = $this->loisirRepository->find($id);\n \n         if (!$loisir) {\n             return new JsonResponse(['message' => 'Loisir not found'], Response::HTTP_NOT_FOUND);\n         }\n-\n         $this->entityManager->remove($loisir);\n         $this->entityManager->flush();\n \n         return new JsonResponse([\n"
                },
                {
                    "date": 1721227515697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,16 +115,14 @@\n     }\n     #[Route('/loisir/{id}', name: 'app_loisir_delete', methods: ['DELETE'])]\n     public function delete(int $id): JsonResponse\n     {\n-        $loisir = $this->loisirRepository->find($id);\n-\n+        $loisir = $this->loisirRepository->find($id); \n         if (!$loisir) {\n             return new JsonResponse(['message' => 'Loisir not found'], Response::HTTP_NOT_FOUND);\n         }\n         $this->entityManager->remove($loisir);\n         $this->entityManager->flush();\n-\n         return new JsonResponse([\n             'message' => 'Loisir deleted successfully',\n         ], Response::HTTP_NO_CONTENT);\n     }\n"
                },
                {
                    "date": 1721228385685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,4 +126,16 @@\n             'message' => 'Loisir deleted successfully',\n         ], Response::HTTP_NO_CONTENT);\n     }\n }\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n"
                }
            ],
            "date": 1721226365583,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Controller;\n\nuse App\\Entity\\Loisir;\nuse App\\Repository\\LoisirRepository;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\n\nclass LoisirController extends AbstractController\n{\n    private EntityManagerInterface $entityManager;\n    private LoisirRepository $loisirRepository;\n\n    public function __construct(EntityManagerInterface $entityManager, LoisirRepository $loisirRepository)\n    {\n        $this->entityManager = $entityManager;\n        $this->loisirRepository = $loisirRepository;\n    }\n\n    #[Route('/loisirs', name: 'app_loisir_list', methods: ['GET'])]\n    public function list(): JsonResponse\n    {\n        $loisirs = $this->loisirRepository->findAll();\n\n        $data = [];\n        foreach ($loisirs as $loisir) {\n            $data[] = [\n                'id' => $loisir->getId(),\n                'titre' => $loisir->getTitre(),\n                'description' => $loisir->getDescription(),\n                'notation' => $loisir->getNotation(),\n                'createdAt' => $loisir->getCreatedAt()->format('c'),\n                'category' => $loisir->getCategory() ? $loisir->getCategory()->getId() : null,\n                'user' => $loisir->getUser() ? $loisir->getUser()->getId() : null,\n            ];\n        }\n\n        return $this->json($data);\n    }\n\n    #[Route('/loisir/{id}', name: 'app_loisir_show', methods: ['GET'])]\n    public function show(int $id): JsonResponse\n    {\n        $loisir = $this->loisirRepository->find($id);\n\n        if (!$loisir) {\n            return new JsonResponse(['message' => 'Loisir not found'], Response::HTTP_NOT_FOUND);\n        }\n\n        return $this->json([\n            'id' => $loisir->getId(),\n            'titre' => $loisir->getTitre(),\n            'description' => $loisir->getDescription(),\n            'notation' => $loisir->getNotation(),\n            'createdAt' => $loisir->getCreatedAt()->format('c'),\n            'category' => $loisir->getCategory() ? $loisir->getCategory()->getId() : null,\n            'user' => $loisir->getUser() ? $loisir->getUser()->getId() : null,\n        ]);\n    }\n\n    #[Route('/loisir', name: 'app_loisir_create', methods: ['POST'])]\n    public function create(Request $request): JsonResponse\n    {\n        $data = json_decode($request->getContent(), true);\n\n        $loisir = new Loisir();\n        $loisir->setTitre($data['titre']);\n        $loisir->setDescription($data['description']);\n        $loisir->setNotation($data['notation']);\n        $loisir->setCreatedAt(new \\DateTime($data['createdAt']));\n        \n        // Handle category and user associations\n        $category = $this->entityManager->getRepository(Category::class)->find($data['category']);\n        $user = $this->entityManager->getRepository(User::class)->find($data['user']);\n        $loisir->setCategory($category);\n        $loisir->setUser($user);\n\n        $this->entityManager->persist($loisir);\n        $this->entityManager->flush();\n\n        return new JsonResponse([\n            'message' => 'Loisir created successfully',\n            'loisir_id' => $loisir->getId(),\n        ], Response::HTTP_CREATED);\n    }\n\n    #[Route('/loisir/{id}', name: 'app_loisir_update', methods: ['PUT'])]\n    public function update(Request $request, int $id): JsonResponse\n    {\n        $data = json_decode($request->getContent(), true);\n\n        $loisir = $this->loisirRepository->find($id);\n\n        if (!$loisir) {\n            return new JsonResponse(['message' => 'Loisir not found'], Response::HTTP_NOT_FOUND);\n        }\n\n        $loisir->setTitre($data['titre']);\n        $loisir->setDescription($data['description']);\n        $loisir->setNotation($data['notation']);\n        $loisir->setCreatedAt(new \\DateTime($data['createdAt']));\n\n        // Handle category and user associations\n        $category = $this->entityManager->getRepository(Category::class)->find($data['category']);\n        $user = $this->entityManager->getRepository(User::class)->find($data['user']);\n        $loisir->setCategory($category);\n        $loisir->setUser($user);\n\n        $this->entityManager->flush();\n\n        return new JsonResponse([\n            'message' => 'Loisir updated successfully',\n        ]);\n    }\n\n    #[Route('/loisir/{id}', name: 'app_loisir_delete', methods: ['DELETE'])]\n    public function delete(int $id): JsonResponse\n    {\n        $loisir = $this->loisirRepository->find($id);\n\n        if (!$loisir) {\n            return new JsonResponse(['message' => 'Loisir not found'], Response::HTTP_NOT_FOUND);\n        }\n\n        $this->entityManager->remove($loisir);\n        $this->entityManager->flush();\n\n        return new JsonResponse([\n            'message' => 'Loisir deleted successfully',\n        ], Response::HTTP_NO_CONTENT);\n    }\n}\n"
        }
    ]
}