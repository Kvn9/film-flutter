{
    "sourceFile": "src/Controller/UserController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1721223074403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721223079723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+<?\n+\n // src/Controller/UserController.php\n \n namespace App\\Controller;\n \n"
                },
                {
                    "date": 1721223255645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-<?\n+<?php\n \n // src/Controller/UserController.php\n \n namespace App\\Controller;\n@@ -53,9 +53,9 @@\n \n     /**\n      * @Route(\"/user/{id}\", name=\"user_edit\", methods={\"PUT\"})\n      */\n-    public function edit(Request $request, User $user): Response\n+    public function edit(Request $request, User $user): Response \n     {\n         $data = json_decode($request->getContent(), true);\n \n         $user->setUsername($data['username']);\n"
                },
                {
                    "date": 1721223401516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     {\n         $data = json_decode($request->getContent(), true);\n \n         $user = new User();\n-        $user->setUsername($data['username']);\n+        $user->set($data['username']);\n         $user->setEmail($data['email']);\n         $user->setPassword($data['password']);\n         $user->setRoles($data['roles']);\n \n"
                },
                {
                    "date": 1721223407024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     {\n         $data = json_decode($request->getContent(), true);\n \n         $user = new User();\n-        $user->set($data['username']);\n+        $user->setNom($data['username']);\n         $user->setEmail($data['email']);\n         $user->setPassword($data['password']);\n         $user->setRoles($data['roles']);\n \n"
                },
                {
                    "date": 1721223418921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     {\n         $data = json_decode($request->getContent(), true);\n \n         $user = new User();\n-        $user->setNom($data['username']);\n+        $user->setNom($data['nom']);\n         $user->setEmail($data['email']);\n         $user->setPassword($data['password']);\n         $user->setRoles($data['roles']);\n \n"
                },
                {
                    "date": 1721223429095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n         $data = json_decode($request->getContent(), true);\n \n         $user = new User();\n         $user->setNom($data['nom']);\n+        $user->setPrenom($data['nom']);\n         $user->setEmail($data['email']);\n         $user->setPassword($data['password']);\n         $user->setRoles($data['roles']);\n \n"
                },
                {
                    "date": 1721223579598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,42 @@\n <?php\n \n // src/Controller/UserController.php\n \n+// src/Controller/UserController.php\n+\n namespace App\\Controller;\n \n use App\\Entity\\User;\n-use App\\Form\\UserType;\n use App\\Repository\\UserRepository;\n use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n use Symfony\\Component\\HttpFoundation\\Request;\n use Symfony\\Component\\HttpFoundation\\Response;\n use Symfony\\Component\\Routing\\Annotation\\Route;\n+use Symfony\\Component\\Serializer\\SerializerInterface;\n+use Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\n+use Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\n+use Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface;\n \n class UserController extends AbstractController\n {\n+    private $passwordEncoder;\n+\n+    public function __construct(UserPasswordEncoderInterface $passwordEncoder)\n+    {\n+        $this->passwordEncoder = $passwordEncoder;\n+    }\n+\n     /**\n      * @Route(\"/user/\", name=\"user_index\", methods={\"GET\"})\n      */\n     public function index(UserRepository $userRepository): Response\n     {\n         $users = $userRepository->findAll();\n-        return $this->json($users);\n+        // Serialisation des utilisateurs en JSON\n+        $serializer = new Serializer([new ObjectNormalizer()], [new JsonEncoder()]);\n+        $data = $serializer->normalize($users, null, ['groups' => 'user:read']);\n+        return $this->json($data, Response::HTTP_OK);\n     }\n \n     /**\n      * @Route(\"/user/new\", name=\"user_new\", methods={\"POST\"})\n@@ -29,15 +44,17 @@\n     public function new(Request $request): Response\n     {\n         $data = json_decode($request->getContent(), true);\n \n+        // Création de l'utilisateur\n         $user = new User();\n         $user->setNom($data['nom']);\n-        $user->setPrenom($data['nom']);\n+        $user->setPrenom($data['prenom']);\n         $user->setEmail($data['email']);\n-        $user->setPassword($data['password']);\n+        $user->setPassword($this->passwordEncoder->encodePassword($user, $data['password']));\n         $user->setRoles($data['roles']);\n \n+        // Sauvegarde dans la base de données\n         $entityManager = $this->getDoctrine()->getManager();\n         $entityManager->persist($user);\n         $entityManager->flush();\n \n@@ -48,26 +65,30 @@\n      * @Route(\"/user/{id}\", name=\"user_show\", methods={\"GET\"})\n      */\n     public function show(User $user): Response\n     {\n-        return $this->json($user);\n+        return $this->json($user, Response::HTTP_OK);\n     }\n \n     /**\n      * @Route(\"/user/{id}\", name=\"user_edit\", methods={\"PUT\"})\n      */\n-    public function edit(Request $request, User $user): Response \n+    public function edit(Request $request, User $user): Response\n     {\n         $data = json_decode($request->getContent(), true);\n \n-        $user->setUsername($data['username']);\n-        $user->setEmail($data['email']);\n-        $user->setPassword($data['password']);\n-        $user->setRoles($data['roles']);\n+        // Mise à jour des informations de l'utilisateur\n+        $user->setNom($data['nom'] ?? $user->getNom());\n+        $user->setPrenom($data['prenom'] ?? $user->getPrenom());\n+        $user->setEmail($data['email'] ?? $user->getEmail());\n+        if (isset($data['password'])) {\n+            $user->setPassword($this->passwordEncoder->encodePassword($user, $data['password']));\n+        }\n+        $user->setRoles($data['roles'] ?? $user->getRoles());\n \n         $this->getDoctrine()->getManager()->flush();\n \n-        return $this->json($user);\n+        return $this->json($user, Response::HTTP_OK);\n     }\n \n     /**\n      * @Route(\"/user/{id}\", name=\"user_delete\", methods={\"DELETE\"})\n"
                },
                {
                    "date": 1721223585294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n <?php\n \n // src/Controller/UserController.php\n \n-// src/Controller/UserController.php\n \n namespace App\\Controller;\n \n use App\\Entity\\User;\n"
                },
                {
                    "date": 1721223794079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,103 +1,139 @@\n <?php\n \n-// src/Controller/UserController.php\n-\n-\n namespace App\\Controller;\n \n use App\\Entity\\User;\n-use App\\Repository\\UserRepository;\n-use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n+use App\\Form\\LoginType;\n+use App\\Form\\RegistrationType;\n+use Doctrine\\ORM\\EntityManagerInterface;\n use Symfony\\Component\\HttpFoundation\\Request;\n use Symfony\\Component\\HttpFoundation\\Response;\n-use Symfony\\Component\\Routing\\Annotation\\Route;\n-use Symfony\\Component\\Serializer\\SerializerInterface;\n-use Symfony\\Component\\Serializer\\Encoder\\JsonEncoder;\n-use Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer;\n-use Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface;\n+use Symfony\\Component\\Routing\\Attribute\\Route;\n+use Symfony\\Component\\HttpFoundation\\JsonResponse;\n+use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n+use Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\n \n-class UserController extends AbstractController\n+class RegistrationController extends AbstractController\n {\n-    private $passwordEncoder;\n+       \n+    private EntityManagerInterface $entityManager;\n \n-    public function __construct(UserPasswordEncoderInterface $passwordEncoder)\n+    public function __construct(EntityManagerInterface $entityManager)\n     {\n-        $this->passwordEncoder = $passwordEncoder;\n+        $this->entityManager = $entityManager;\n     }\n \n-    /**\n-     * @Route(\"/user/\", name=\"user_index\", methods={\"GET\"})\n-     */\n-    public function index(UserRepository $userRepository): Response\n-    {\n-        $users = $userRepository->findAll();\n-        // Serialisation des utilisateurs en JSON\n-        $serializer = new Serializer([new ObjectNormalizer()], [new JsonEncoder()]);\n-        $data = $serializer->normalize($users, null, ['groups' => 'user:read']);\n-        return $this->json($data, Response::HTTP_OK);\n-    }\n \n-    /**\n-     * @Route(\"/user/new\", name=\"user_new\", methods={\"POST\"})\n-     */\n-    public function new(Request $request): Response\n+    #[Route('/inscription', name: 'app_registration',methods:['POST'])]\n+    public function index(Request $request, UserPasswordHasherInterface $encoder, EntityManagerInterface $entityManager): Response\n     {\n-        $data = json_decode($request->getContent(), true);\n-\n-        // Création de l'utilisateur\n+       \n         $user = new User();\n-        $user->setNom($data['nom']);\n-        $user->setPrenom($data['prenom']);\n-        $user->setEmail($data['email']);\n-        $user->setPassword($this->passwordEncoder->encodePassword($user, $data['password']));\n-        $user->setRoles($data['roles']);\n+        $form = $this->createForm(RegistrationType::class, $user);\n \n-        // Sauvegarde dans la base de données\n-        $entityManager = $this->getDoctrine()->getManager();\n-        $entityManager->persist($user);\n-        $entityManager->flush();\n+        $data= json_decode($request->getContent(), true);\n+       \n+          \n+            $user_find = $this->entityManager->getRepository(User::class)->findOneByEmail($data['email']);\n \n-        return $this->json($user, Response::HTTP_CREATED);\n+            if (!$user_find) {\n+                // Hasher le mot de passe\n+                $password = $encoder->hashPassword($user, $data['password']);\n+                $user->setEmail($data['email']);\n+                $user->setNom($data['nom']);\n+                $user->setPrenom($data['prenom']);\n+                $user->setDateanniv(new \\DateTime());\n+                $user->setRoles(['ROLE_USER']);\n+                $user->setPassword($password);\n+                $this->entityManager->persist($user);\n+                $this->entityManager->flush();\n+\n+        }\n+        return $this->json([\n+            'message' => 'user created successfully',\n+            'user_id' => $user->getId(),\n+\n+        ], Response::HTTP_CREATED);\n     }\n \n-    /**\n-     * @Route(\"/user/{id}\", name=\"user_show\", methods={\"GET\"})\n-     */\n-    public function show(User $user): Response\n+\n+    #[Route('/user/{id}', name: 'app_user_details', methods: ['GET'])]\n+    public function getUserDetails(   Request $request,int $id ,EntityManagerInterface $entityManager): JsonResponse\n     {\n-        return $this->json($user, Response::HTTP_OK);\n+        // Récupérer l'utilisateur par son ID depuis la base de données\n+        $user = $this->entityManager->getRepository(User::class)->find($id);\n+\n+        if (!$user) {\n+            // Retourner une réponse JSON avec un message d'erreur si l'utilisateur n'est pas trouvé\n+            return new JsonResponse(['message' => 'User not found'], Response::HTTP_NOT_FOUND);\n+        }\n+\n+        // Retourner une réponse JSON avec les détails de l'utilisateur\n+        return $this->json([\n+            'id' => $user->getId(),\n+            'email' => $user->getEmail(),\n+            'nom' => $user->getNom(),\n+            'prenom' => $user->getPrenom(),\n+            'dateanniv' => $user->getDateanniv()->format('Y-m-d'), // Format de date\n+            'roles' => $user->getRoles(),\n+        ]);\n     }\n-\n-    /**\n-     * @Route(\"/user/{id}\", name=\"user_edit\", methods={\"PUT\"})\n-     */\n-    public function edit(Request $request, User $user): Response\n+    #[Route('/users', name: 'app_get_all_users', methods: ['GET'])]\n+    public function getAllUsers(): JsonResponse\n     {\n-        $data = json_decode($request->getContent(), true);\n+        // Récupérer tous les utilisateurs depuis la base de données\n+        $userRepository = $this->entityManager->getRepository(User::class);\n+        $users = $userRepository->findAll();\n \n-        // Mise à jour des informations de l'utilisateur\n-        $user->setNom($data['nom'] ?? $user->getNom());\n-        $user->setPrenom($data['prenom'] ?? $user->getPrenom());\n-        $user->setEmail($data['email'] ?? $user->getEmail());\n-        if (isset($data['password'])) {\n-            $user->setPassword($this->passwordEncoder->encodePassword($user, $data['password']));\n+        // Construire un tableau contenant les détails de chaque utilisateur\n+        $usersData = [];\n+        foreach ($users as $user) {\n+            $usersData[] = [\n+                'id' => $user->getId(),\n+                'email' => $user->getEmail(),\n+                'nom' => $user->getNom(),\n+                'prenom' => $user->getPrenom(),\n+                'dateanniv' => $user->getDateanniv()->format('Y-m-d'), // Format de date\n+                'roles' => $user->getRoles(),\n+            ];\n         }\n-        $user->setRoles($data['roles'] ?? $user->getRoles());\n \n-        $this->getDoctrine()->getManager()->flush();\n-\n-        return $this->json($user, Response::HTTP_OK);\n+        // Retourner une réponse JSON avec tous les utilisateurs\n+        return new JsonResponse($usersData);\n     }\n \n-    /**\n-     * @Route(\"/user/{id}\", name=\"user_delete\", methods={\"DELETE\"})\n-     */\n-    public function delete(User $user): Response\n+    #[Route('/connexion', name: 'app_connexion', methods:['POST'])]\n+\n+    public function login(Request $request, UserPasswordHasherInterface $passwordHasher): JsonResponse\n     {\n-        $entityManager = $this->getDoctrine()->getManager();\n-        $entityManager->remove($user);\n-        $entityManager->flush();\n+        $user = new User();\n+        $form = $this->createForm(LoginType::class, $user);\n+        $data = json_decode($request->getContent(), true);\n+        \n+        // Manuellement soumettre les données JSON au formulaire\n+        $form->submit($data);\n \n-        return $this->json(null, Response::HTTP_NO_CONTENT);\n+            $user = $this->entityManager->getRepository(User::class)->findOneBy(['email' => $data['email']]);\n+\n+            if (!$user) {\n+                return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n+            }\n+            if (!$passwordHasher->isPasswordValid($user, $data['password'])) {\n+                return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n+            }\n+            return new JsonResponse([\n+                'message' => 'Login successful',\n+            ], Response::HTTP_OK);\n+        return new JsonResponse(['message' => 'Invalid data'], Response::HTTP_BAD_REQUEST);\n     }\n }\n+\n+\n+\n+\n+\n+    \n+\n+\n+\n+\n"
                },
                {
                    "date": 1721223824843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     public function index(Request $request, UserPasswordHasherInterface $encoder, EntityManagerInterface $entityManager): Response\n     {\n        \n         $user = new User();\n-        $form = $this->createForm(RegistrationType::class, $user);\n+        $form = $this->createForm(userType::class, $user);\n \n         $data= json_decode($request->getContent(), true);\n        \n           \n"
                },
                {
                    "date": 1721223832875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n namespace App\\Controller;\n \n use App\\Entity\\User;\n+use App\\Form\\UserType;\n use App\\Form\\LoginType;\n use App\\Form\\RegistrationType;\n use Doctrine\\ORM\\EntityManagerInterface;\n use Symfony\\Component\\HttpFoundation\\Request;\n@@ -28,9 +29,9 @@\n     public function index(Request $request, UserPasswordHasherInterface $encoder, EntityManagerInterface $entityManager): Response\n     {\n        \n         $user = new User();\n-        $form = $this->createForm(userType::class, $user);\n+        $form = $this->createForm(UserType::class, $user);\n \n         $data= json_decode($request->getContent(), true);\n        \n           \n"
                },
                {
                    "date": 1721223841559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,8 @@\n namespace App\\Controller;\n \n use App\\Entity\\User;\n use App\\Form\\UserType;\n-use App\\Form\\LoginType;\n-use App\\Form\\RegistrationType;\n use Doctrine\\ORM\\EntityManagerInterface;\n use Symfony\\Component\\HttpFoundation\\Request;\n use Symfony\\Component\\HttpFoundation\\Response;\n use Symfony\\Component\\Routing\\Attribute\\Route;\n"
                },
                {
                    "date": 1721223881888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,32 +100,32 @@\n         // Retourner une réponse JSON avec tous les utilisateurs\n         return new JsonResponse($usersData);\n     }\n \n-    #[Route('/connexion', name: 'app_connexion', methods:['POST'])]\n+    // #[Route('/connexion', name: 'app_connexion', methods:['POST'])]\n \n-    public function login(Request $request, UserPasswordHasherInterface $passwordHasher): JsonResponse\n-    {\n-        $user = new User();\n-        $form = $this->createForm(LoginType::class, $user);\n-        $data = json_decode($request->getContent(), true);\n+    // public function login(Request $request, UserPasswordHasherInterface $passwordHasher): JsonResponse\n+    // {\n+    //     $user = new User();\n+    //     $form = $this->createForm(LoginType::class, $user);\n+    //     $data = json_decode($request->getContent(), true);\n         \n-        // Manuellement soumettre les données JSON au formulaire\n-        $form->submit($data);\n+    //     // Manuellement soumettre les données JSON au formulaire\n+    //     $form->submit($data);\n \n-            $user = $this->entityManager->getRepository(User::class)->findOneBy(['email' => $data['email']]);\n+    //         $user = $this->entityManager->getRepository(User::class)->findOneBy(['email' => $data['email']]);\n \n-            if (!$user) {\n-                return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n-            }\n-            if (!$passwordHasher->isPasswordValid($user, $data['password'])) {\n-                return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n-            }\n-            return new JsonResponse([\n-                'message' => 'Login successful',\n-            ], Response::HTTP_OK);\n-        return new JsonResponse(['message' => 'Invalid data'], Response::HTTP_BAD_REQUEST);\n-    }\n+    //         if (!$user) {\n+    //             return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n+    //         }\n+    //         if (!$passwordHasher->isPasswordValid($user, $data['password'])) {\n+    //             return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n+    //         }\n+    //         return new JsonResponse([\n+    //             'message' => 'Login successful',\n+    //         ], Response::HTTP_OK);\n+    //     return new JsonResponse(['message' => 'Invalid data'], Response::HTTP_BAD_REQUEST);\n+    // }\n }\n \n \n \n"
                },
                {
                    "date": 1721223967135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n use Symfony\\Component\\HttpFoundation\\JsonResponse;\n use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n use Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\n \n-class RegistrationController extends AbstractController\n+class RegisController extends AbstractController\n {\n        \n     private EntityManagerInterface $entityManager;\n \n"
                },
                {
                    "date": 1721223973321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n use Symfony\\Component\\HttpFoundation\\JsonResponse;\n use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n use Symfony\\Component\\PasswordHasher\\Hasher\\UserPasswordHasherInterface;\n \n-class RegisController extends AbstractController\n+class UserController extends AbstractController\n {\n        \n     private EntityManagerInterface $entityManager;\n \n"
                },
                {
                    "date": 1721224074858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n                 $password = $encoder->hashPassword($user, $data['password']);\n                 $user->setEmail($data['email']);\n                 $user->setNom($data['nom']);\n                 $user->setPrenom($data['prenom']);\n-                $user->setDateanniv(new \\DateTime());\n+                \n                 $user->setRoles(['ROLE_USER']);\n                 $user->setPassword($password);\n                 $this->entityManager->persist($user);\n                 $this->entityManager->flush();\n"
                },
                {
                    "date": 1721224202052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n                 'id' => $user->getId(),\n                 'email' => $user->getEmail(),\n                 'nom' => $user->getNom(),\n                 'prenom' => $user->getPrenom(),\n-                'dateanniv' => $user->getDateanniv()->format('Y-m-d'), // Format de date\n+              \n                 'roles' => $user->getRoles(),\n             ];\n         }\n \n"
                },
                {
                    "date": 1721224462308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,83 +55,13 @@\n         ], Response::HTTP_CREATED);\n     }\n \n \n-    #[Route('/user/{id}', name: 'app_user_details', methods: ['GET'])]\n-    public function getUserDetails(   Request $request,int $id ,EntityManagerInterface $entityManager): JsonResponse\n-    {\n-        // Récupérer l'utilisateur par son ID depuis la base de données\n-        $user = $this->entityManager->getRepository(User::class)->find($id);\n+    \n \n-        if (!$user) {\n-            // Retourner une réponse JSON avec un message d'erreur si l'utilisateur n'est pas trouvé\n-            return new JsonResponse(['message' => 'User not found'], Response::HTTP_NOT_FOUND);\n-        }\n \n-        // Retourner une réponse JSON avec les détails de l'utilisateur\n-        return $this->json([\n-            'id' => $user->getId(),\n-            'email' => $user->getEmail(),\n-            'nom' => $user->getNom(),\n-            'prenom' => $user->getPrenom(),\n-            'dateanniv' => $user->getDateanniv()->format('Y-m-d'), // Format de date\n-            'roles' => $user->getRoles(),\n-        ]);\n-    }\n-    #[Route('/users', name: 'app_get_all_users', methods: ['GET'])]\n-    public function getAllUsers(): JsonResponse\n-    {\n-        // Récupérer tous les utilisateurs depuis la base de données\n-        $userRepository = $this->entityManager->getRepository(User::class);\n-        $users = $userRepository->findAll();\n \n-        // Construire un tableau contenant les détails de chaque utilisateur\n-        $usersData = [];\n-        foreach ($users as $user) {\n-            $usersData[] = [\n-                'id' => $user->getId(),\n-                'email' => $user->getEmail(),\n-                'nom' => $user->getNom(),\n-                'prenom' => $user->getPrenom(),\n-              \n-                'roles' => $user->getRoles(),\n-            ];\n-        }\n \n-        // Retourner une réponse JSON avec tous les utilisateurs\n-        return new JsonResponse($usersData);\n-    }\n-\n-    // #[Route('/connexion', name: 'app_connexion', methods:['POST'])]\n-\n-    // public function login(Request $request, UserPasswordHasherInterface $passwordHasher): JsonResponse\n-    // {\n-    //     $user = new User();\n-    //     $form = $this->createForm(LoginType::class, $user);\n-    //     $data = json_decode($request->getContent(), true);\n-        \n-    //     // Manuellement soumettre les données JSON au formulaire\n-    //     $form->submit($data);\n-\n-    //         $user = $this->entityManager->getRepository(User::class)->findOneBy(['email' => $data['email']]);\n-\n-    //         if (!$user) {\n-    //             return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n-    //         }\n-    //         if (!$passwordHasher->isPasswordValid($user, $data['password'])) {\n-    //             return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n-    //         }\n-    //         return new JsonResponse([\n-    //             'message' => 'Login successful',\n-    //         ], Response::HTTP_OK);\n-    //     return new JsonResponse(['message' => 'Invalid data'], Response::HTTP_BAD_REQUEST);\n-    // }\n-}\n-\n-\n-\n-\n-\n     \n \n \n \n"
                },
                {
                    "date": 1721224467406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n         ], Response::HTTP_CREATED);\n     }\n \n \n-    \n+}\n \n \n \n \n"
                },
                {
                    "date": 1721224852997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,14 +54,34 @@\n \n         ], Response::HTTP_CREATED);\n     }\n \n+    #[Route('/users/{id}', name: 'get_user_by_id', methods: ['GET'])]\n+    public function getUserById(int $id): Response\n+    {\n+        $user = $this->entityManager->getRepository(User::class)->find($id);\n \n+        if (!$user) {\n+            return $this->json(['error' => 'User not found'], Response::HTTP_NOT_FOUND);\n+        }\n+\n+        $data = [\n+            'id' => $user->getId(),\n+            'email' => $user->getEmail(),\n+            'nom' => $user->getNom(),\n+            'prenom' => $user->getPrenom(),\n+            'roles' => $user->getRoles(),\n+        ];\n+\n+        return $this->json($data);\n+    }\n }\n \n+}\n \n \n \n+\n     \n \n \n \n"
                },
                {
                    "date": 1721224872734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,10 +73,26 @@\n         ];\n \n         return $this->json($data);\n     }\n-}\n \n+\n+    #[Route('/users', name: 'get_all_users', methods: ['GET'])]\n+    public function getAllUsers(): Response\n+    {\n+        $users = $this->entityManager->getRepository(User::class)->findAll();\n+\n+        $data = array_map(fn(User $user) => [\n+            'id' => $user->getId(),\n+            'email' => $user->getEmail(),\n+            'nom' => $user->getNom(),\n+            'prenom' => $user->getPrenom(),\n+            'roles' => $user->getRoles(),\n+        ], $users);\n+\n+        return $this->json($data);\n+    }\n+\n }\n \n \n \n"
                },
                {
                    "date": 1721224879608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,11 @@\n \n         return $this->json($data);\n     }\n \n+\n+\n+    \n }\n \n \n \n"
                },
                {
                    "date": 1721224953257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,10 +92,13 @@\n         return $this->json($data);\n     }\n \n \n+    \n \n-    \n+\n+\n+\n }\n \n \n \n"
                },
                {
                    "date": 1721224962398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,8 +92,9 @@\n         return $this->json($data);\n     }\n \n \n+\n     \n \n \n \n"
                },
                {
                    "date": 1721224979936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,14 +92,14 @@\n         return $this->json($data);\n     }\n \n \n-\n     \n \n \n \n \n+\n }\n \n \n \n"
                },
                {
                    "date": 1721225077850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n         return $this->json($data);\n     }\n \n \n-    \n+    P\n \n \n \n \n"
                },
                {
                    "date": 1721225166454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,16 +90,40 @@\n         ], $users);\n \n         return $this->json($data);\n     }\n+    #[Route('/connexion', name: 'app_connexion', methods:['POST'])]\n \n+    public function login(Request $request, UserPasswordHasherInterface $passwordHasher): JsonResponse\n+    {\n+        $user = new User();\n+        $form = $this->createForm(LoginType::class, $user);\n+        $data = json_decode($request->getContent(), true);\n+        \n+        // Manuellement soumettre les données JSON au formulaire\n+        $form->submit($data);\n \n-    P\n+            $user = $this->entityManager->getRepository(User::class)->findOneBy(['email' => $data['email']]);\n \n+            if (!$user) {\n+                return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n+            }\n+            if (!$passwordHasher->isPasswordValid($user, $data['password'])) {\n+                return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n+            }\n+            return new JsonResponse([\n+                'message' => 'Login successful',\n+            ], Response::HTTP_OK);\n+        return new JsonResponse(['message' => 'Invalid data'], Response::HTTP_BAD_REQUEST);\n+    }\n+}\n \n+    \n \n \n \n+\n+\n }\n \n \n \n"
                },
                {
                    "date": 1721225177902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n namespace App\\Controller;\n \n use App\\Entity\\User;\n use App\\Form\\UserType;\n+use App\\Form\\LoginType;\n use Doctrine\\ORM\\EntityManagerInterface;\n use Symfony\\Component\\HttpFoundation\\Request;\n use Symfony\\Component\\HttpFoundation\\Response;\n use Symfony\\Component\\Routing\\Attribute\\Route;\n@@ -122,13 +123,13 @@\n \n \n \n \n-}\n \n \n \n \n+\n     \n \n \n \n"
                },
                {
                    "date": 1721225286881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n         ], $users);\n \n         return $this->json($data);\n     }\n-    #[Route('/connexion', name: 'app_connexion', methods:['POST'])]\n+    #[Route('/connexion', name: 'app_connexion', methods:['GET'])]\n \n     public function login(Request $request, UserPasswordHasherInterface $passwordHasher): JsonResponse\n     {\n         $user = new User();\n"
                },
                {
                    "date": 1721225364877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,33 +91,38 @@\n         ], $users);\n \n         return $this->json($data);\n     }\n-    #[Route('/connexion', name: 'app_connexion', methods:['GET'])]\n-\n+    #[Route('/connexion', name: 'app_connexion', methods: ['POST'])]\n     public function login(Request $request, UserPasswordHasherInterface $passwordHasher): JsonResponse\n     {\n-        $user = new User();\n-        $form = $this->createForm(LoginType::class, $user);\n+        // Récupération des données JSON envoyées\n         $data = json_decode($request->getContent(), true);\n-        \n-        // Manuellement soumettre les données JSON au formulaire\n-        $form->submit($data);\n \n-            $user = $this->entityManager->getRepository(User::class)->findOneBy(['email' => $data['email']]);\n+        if (!isset($data['email'], $data['password'])) {\n+            return new JsonResponse(['message' => 'Invalid data'], Response::HTTP_BAD_REQUEST);\n+        }\n \n-            if (!$user) {\n-                return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n-            }\n-            if (!$passwordHasher->isPasswordValid($user, $data['password'])) {\n-                return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n-            }\n-            return new JsonResponse([\n-                'message' => 'Login successful',\n-            ], Response::HTTP_OK);\n-        return new JsonResponse(['message' => 'Invalid data'], Response::HTTP_BAD_REQUEST);\n+        // Trouver l'utilisateur par son email\n+        $user = $this->entityManager->getRepository(User::class)->findOneBy(['email' => $data['email']]);\n+\n+        if (!$user) {\n+            return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n+        }\n+\n+        // Vérifier le mot de passe\n+        if (!$passwordHasher->isPasswordValid($user, $data['password'])) {\n+            return new JsonResponse(['message' => 'Invalid credentials'], Response::HTTP_UNAUTHORIZED);\n+        }\n+\n+        // Authentification réussie\n+        return new JsonResponse([\n+            'message' => 'Login successful',\n+            // Vous pouvez également renvoyer des informations supplémentaires comme un token JWT ici\n+        ], Response::HTTP_OK);\n     }\n }\n+}\n \n     \n \n \n"
                },
                {
                    "date": 1721225486360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,11 +119,58 @@\n             'message' => 'Login successful',\n             // Vous pouvez également renvoyer des informations supplémentaires comme un token JWT ici\n         ], Response::HTTP_OK);\n     }\n+\n+\n+\n+\n+    #[Route('/utilisateur/{id}', name: 'app_user_edit', methods: ['PUT'])]\n+    public function edit(int $id, Request $request, UserPasswordHasherInterface $passwordHasher): JsonResponse\n+    {\n+        // Trouver l'utilisateur par ID\n+        $user = $this->entityManager->getRepository(User::class)->find($id);\n+\n+        if (!$user) {\n+            return new JsonResponse(['message' => 'User not found'], JsonResponse::HTTP_NOT_FOUND);\n+        }\n+\n+        // Récupération des données JSON envoyées\n+        $data = json_decode($request->getContent(), true);\n+\n+        if (isset($data['email'])) {\n+            $user->setEmail($data['email']);\n+        }\n+        if (isset($data['nom'])) {\n+            $user->setNom($data['nom']);\n+        }\n+        if (isset($data['prenom'])) {\n+            $user->setPrenom($data['prenom']);\n+        }\n+        if (isset($data['password'])) {\n+            $hashedPassword = $passwordHasher->hashPassword($user, $data['password']);\n+            $user->setPassword($hashedPassword);\n+        }\n+\n+        // Persister les modifications dans la base de données\n+        $this->entityManager->flush();\n+\n+        // Réponse en cas de succès\n+        return new JsonResponse([\n+            'message' => 'User updated successfully',\n+            'user' => [\n+                'id' => $user->getId(),\n+                'email' => $user->getEmail(),\n+                'nom' => $user->getNom(),\n+                'prenom' => $user->getPrenom(),\n+                'roles' => $user->getRoles(),\n+            ]\n+        ], JsonResponse::HTTP_OK);\n+    }\n }\n }\n \n+\n     \n \n \n \n"
                }
            ],
            "date": 1721223074403,
            "name": "Commit-0",
            "content": "// src/Controller/UserController.php\n\nnamespace App\\Controller;\n\nuse App\\Entity\\User;\nuse App\\Form\\UserType;\nuse App\\Repository\\UserRepository;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass UserController extends AbstractController\n{\n    /**\n     * @Route(\"/user/\", name=\"user_index\", methods={\"GET\"})\n     */\n    public function index(UserRepository $userRepository): Response\n    {\n        $users = $userRepository->findAll();\n        return $this->json($users);\n    }\n\n    /**\n     * @Route(\"/user/new\", name=\"user_new\", methods={\"POST\"})\n     */\n    public function new(Request $request): Response\n    {\n        $data = json_decode($request->getContent(), true);\n\n        $user = new User();\n        $user->setUsername($data['username']);\n        $user->setEmail($data['email']);\n        $user->setPassword($data['password']);\n        $user->setRoles($data['roles']);\n\n        $entityManager = $this->getDoctrine()->getManager();\n        $entityManager->persist($user);\n        $entityManager->flush();\n\n        return $this->json($user, Response::HTTP_CREATED);\n    }\n\n    /**\n     * @Route(\"/user/{id}\", name=\"user_show\", methods={\"GET\"})\n     */\n    public function show(User $user): Response\n    {\n        return $this->json($user);\n    }\n\n    /**\n     * @Route(\"/user/{id}\", name=\"user_edit\", methods={\"PUT\"})\n     */\n    public function edit(Request $request, User $user): Response\n    {\n        $data = json_decode($request->getContent(), true);\n\n        $user->setUsername($data['username']);\n        $user->setEmail($data['email']);\n        $user->setPassword($data['password']);\n        $user->setRoles($data['roles']);\n\n        $this->getDoctrine()->getManager()->flush();\n\n        return $this->json($user);\n    }\n\n    /**\n     * @Route(\"/user/{id}\", name=\"user_delete\", methods={\"DELETE\"})\n     */\n    public function delete(User $user): Response\n    {\n        $entityManager = $this->getDoctrine()->getManager();\n        $entityManager->remove($user);\n        $entityManager->flush();\n\n        return $this->json(null, Response::HTTP_NO_CONTENT);\n    }\n}\n"
        }
    ]
}